자료구조 속도표기 = O(n)


배열 : 랜덤 엑세스(언제든지 같은 시간안에 접근할 수 있음. 10을 찾든 100을 찾든 같은 시간이 소요됨)
Add: 배열에 값을 추가하며, 할당된 배열 이상으로 들어온다면 현재 배열의 크기의 두배로 늘리고 값이 들어온다.

예시: 강사님이 DMP2를 개발할때 버그가 발생하여 확인해보니 PSP 메모리 할당량을 초과했다.
원인은 이당시 리듬게임은 노트 하나하나가 배열에 들어가 있는 방식이었다. 새로운 채보를 짜는 도중
미리 할당해놓은 배열의 할당량을 조금 초과했다. 이게 넘어가게되면 배열은 현재의 최대값의 두배를 잡게되
므로 PSP 최대 메모리까지 잡아먹게 된것이다.-> 메모리 할당량을 크게 만듬으로써 해결

단점 : 많으면 많을수록 시간이 오래 걸림.
(하드웨어와 연관성이 있음)
 
링크드 리스트 : 무언가를 빠르게 넣거나 빼야할때 사용함. 
단점: 찾는데 오래걸림

스택 : 사칙연산을 담당함. (PC의 CPU는 스택방식으로 되어있음) 하드웨어의 제약이 있음

큐 : 윈도우가 사용함. 맨 먼저 요청한것이 먼저 실행됨. 상황에 따라서 요청을 시행하지 않을 수 있음.

우선순위 큐 : 우선순위에 따라서 내부정렬이 되는 큐 (ex. 윈도우에서 Ctrl + Alt + Delete는 우선순위가 매우 높
으므로 가장 먼저 실행된다.) 장애물이 존재하는 길찾기 알고리즘에 사용됨.
길찾기 알고리즘
X-----------O(장애물)------------->Y
부딪히면 계속 그 주변을 돌거나 한쪽으로 돈 후 부딪힐때까지 계속 전진하는 경우가 있다.
1.한번 방문한 노드는 다시 방문하지 않는다.
2.이전 노드를 기억한다.
큐에 노드를 집어넣고 검사하는 방식.

(나머지는 하기 나름)

중단점(브레이크포인트) 

디버깅 하는법

1. 중단점(브레이크포인트) 지정
2. 디버그 -> Unity 디버거 연결 선택
3. 디버거 실행