●업계 연봉
선생님: 소기업 -> 대기업 <임원급> -> 스타트업(망) -> 대기업

프로그래머: 실력만 쭉 올린다면 MAX 1억 + alpha, 단 시간이 걸림
AI가 대체하지 않는 이상 억대연봉자까지 올라갈 수 있다.(프로그래밍이 세계적으로 볼때, 같은 나이대에 연봉차가 제일 큼)

QA = 알바, 대체 가능한 인력

기획: 실력으로만으로는 절대 올라갈 수 없음(인맥같은것을 고려해야함)

그래픽: 더더욱. 1억 넘는것이 힘듬. 연예계랑 비슷함. 그림을 대중들이 좋아해야함.

보통 연봉을 올리기 위해서 이직을 함.

Specialist(한 분야에 특출난 사람) 	★Generalist(모든 분야를 적절하게 잘하는 사람)
->3D그래픽, 셰이더, 이펙트,엔진        ->아키텍처(전반적인 게임의 뼈대, 로직을 설계) 
AI, 사운드, ETC..., 네트워크               ->최근들어서 급상승함
->EA 등, 자체엔진을 사용함	
->예전에는 돈을 많이 받았으나          ->가지고 있는 요소들을 조합하여 어떤 기술을 도입하고
 요즘은 딱히..			어떠한 게임을 만들것인가?
->TD(Technical Director, 기술자문)
                           연봉이 수직상승한다면 그사람은 전략적인 선택을 한 것		            

			결론:실력, 제너럴리스트가 될 수 있도록 로드맵을 짜자.

보통 학원생들은 뽑지 않았음. 실무적이지 않음. 
게임을 만들고는 있지만 일반적인 학원에서는 대부분 비슷한 포트폴리오를 만들어서 나온다.
동영상으로 보내진다.(소스코드를 봐야 합격이 된다)

1)독학 or 학원에서 배운거 복습
독학없이 학원에서 배운것으로는 할 수 있는것이 얼마 없다.
암기과목처럼 공부해도 실력이 올라갈 수 있다.(80%는 채워진다)
-문법 -알고리즘 -자료구조
어떻게 하든간에 스스로 해야만 하는 부분

80% = 독학 및 복습
20% = 아무리 잘해도 알 수 없으며 어떻게 배운것을 조합하고 사용해야 잘 나올 수 있을까? (경험에서 우러나오는 부분)
학원에서 배울 수 있지만 그렇지 않다면 회사에서 굴러보면서 배움
집에서 복습하고 배운것을 지속적으로 사용해봐야함.

출시 데드라인때
프로그램:80%
아트:80%
디자인,기획:80%
이면 프로그램은 절대 퇴근할 수 없다.(0 or 100밖에 없다) -> 누군가는 100%를 채우기 위해 남아서 일을하고 누군가는 20%만 하면 되니 퇴근한다.
하지만 1%로도 터닝포인트가 될 수 있는것이 프로그램이다.
일본: NO 와 YES의 차이를 알아야됨
해외취업 자체는 겁먹을 필요가 없지만 

해외에서는 자신을 어필해야 실력을 인정받을 수 있다.
한국에서는 아니지만..


일반적인 커리큘럼
문법 -> 충돌 -> 사운드 -> UI (책보고 가능)
실제로 게임을 만드는데 사용되는 부분, 구조
현재 우리가 배우고 있는 부분(State, 이동 등..)

애매하게 느껴질때는 질문을 해라

========================================================================================================
마우스가 클릭한 위치로 캐릭터를 이동
-Unity에서는 어떻게 마우스 입력을 처리하는가? : Input.GetKey(KeyCode.Mouse0)
-클릭한 지점은 어떻게 아는가?: Raycast 사용 -> Raycast를 어떻게 사용하는가?
-클릭한 지점으로 캐릭터를 이동시켜야함: 목표지정 세팅 후 이동스테이트로 전환.

캐릭터 스킨

UI, 카메라

맵(마을) - 컴포넌트 개념
길찾기 알고리즘 (캐릭터가 목적지까지 경로를 찾아서 감)

사운드(BGM, 효과음) / 이펙트

view좌표 / 월드 좌표
view좌표 : 카메라의 위치에 따라서 좌표가 달라짐
월드좌표 : 고정값